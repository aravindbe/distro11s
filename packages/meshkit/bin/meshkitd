#!/bin/bash
ulimit -c 100000

CONF=/etc/meshkit/meshkit.default.conf
[ -e /etc/meshkit/meshkit.conf ] && CONF=/etc/meshkit/meshkit.conf

[ "${DEBUG}" = "" ] && DEBUG=0
[ ${DEBUG} = 2 ] && set -x

function log {
	[ ${DEBUG} -gt 0 ] && echo $*
	while [[ "$1" != "" ]] &&  [[ $1 == -* ]]; do
		shift 1
	done
	logger "meshkitd:" "'"$*"'"
}

function die {
	log ${*}
	killall hostapd &> /dev/null
	killall meshd-nl80211 &> /dev/null
	killall dhclient &> /dev/null
        if [ "`ifconfig -a | grep mesh0`" != "" ]; then
		ip link set dev mesh0 down &> /dev/null
		iw dev mesh0 del &> /dev/null
        fi

	if [ "`ifconfig -a | grep br0`" != "" ]; then
		ip link set dev br0 down &> /dev/null
		brctl delbr br0 &> /dev/null
	fi
	exit -1
}

function shutdown {
	die "Shutting down"
}

function try {
	if [ ${DEBUG} -gt 0 ]; then
		eval $*
		RESULT=$?
	else
		eval $* &> /dev/null
		RESULT=$?
	fi
	if [ ! ${RESULT} -eq 0 ]; then
		log "Failed (${RESULT}).  Trying again in 5s"
		sleep 5
		return 1
	else
		log "Success"
		return 0
	fi
}

# add count $2 to base IP address $1
function increment_ip {
	SUFFIX=$((`echo ${1} | cut -d '.' -f 4` + ${2}))
	NEW_IP=`echo ${1} | cut -d '.' -f 1-3`".${SUFFIX}"
	echo ${NEW_IP}
}

# bridge interfaces $2 and $3 in $1. The bride interface $1 will
# use the MAC addres of $2
function bridge_ifaces {
	_BRIDGE_IF=${1}
	_IF1=${2}
	_IF2=${3}
	log "Bridging ${_IF1} and ${_IF2} interfaces."
	ip addr flush dev ${_IF1} || die "Failed to flush the interface ${_IF1}"
	ip addr flush dev ${_IF2} || die "Failed to flush the interface ${_IF2}"
	brctl addbr ${_BRIDGE_IF} || die "Failed to create the brigde interface ${_BRIDGE_IF}"
	brctl addif ${_BRIDGE_IF} ${_IF1} ${_IF2} || die "Failed to add ${_IF1} and ${_IF2} to ${_BRIDGE_IF}"
	_MAC=`ifconfig ${_IF1} | grep HWaddr | awk '{print$5}'`
	ip link set ${_BRIDGE_IF} address ${_MAC} || die "Failed to set the MAC address of ${_IF1} to ${_BRIDGE_IF}"
	ip link set dev ${_BRIDGE_IF} up
}

trap 'shutdown' TERM

[ -e ${CONF} ] || die "Config file ${CONF} does not exist"

source ${CONF}

# Calculate updated IP addresses if configured to do so
REAL_MESH_IP=${MESH_IP}
REAL_CTL_IP=${CTL_IP}

if [ -e /etc/distro11s.conf -a -e /etc/distro11s-hostnumber ]; then
	source /etc/distro11s.conf
	if [ -e /etc/distro11s-hostnumber ]; then
		HOSTNUM=`cat /etc/distro11s-hostnumber`
		if [ "${MESH_IP}" != "" -a "${MESH_IP}" != "auto" ]; then
			REAL_MESH_IP=`increment_ip ${MESH_IP} ${HOSTNUM}`
		fi
		if [ "${CTL_IP}" != "" -a "${CTL_IP}" != "auto" ]; then
			REAL_CTL_IP=`increment_ip ${CTL_IP} ${HOSTNUM}`
		fi
	fi
fi

# start with a clean house
killall hostapd &> /dev/null
killall meshd-nl80211 &> /dev/null
killall dhclient &> /dev/null
if [ "`ifconfig -a | grep mesh0`" != "" ]; then
	ip link set dev mesh0 down &> /dev/null
	iw dev mesh0 del &> /dev/null
fi
if [ "`ifconfig -a | grep br0`" != "" ]; then
	ip link set dev br0 down &> /dev/null
	brctl delbr br0 &> /dev/null
fi
rm -f /var/log/dhclient.log

if [ "${MESH_IF}" != "" ]; then
	[ "${MESH_CHANNEL}" = "" ] && MESH_CHANNEL=6

	# Generate some dependent parameters
	MESH_BAND=11a
	if [ ${MESH_CHANNEL} -gt 0 -a ${MESH_CHANNEL} -lt 12 ]; then
		MESH_BAND=11g
	fi
	MESHD_LOG=/var/log/authsae.${MESH_IF}.log
	log -n "Starting mesh on ${MESH_IF}..."

	# sigh.  sometimes when we restart meshkit MESH_IF doesn't appear unless we
	# wait for it.  Not sure why.
	sleep 1
	ifconfig -a | grep ${MESH_IF} &> /dev/null || die "No such iface ${MESH_IF}"
	iw dev ${MESH_IF} interface add mesh0 type mesh || die "Failed to add mesh interface"
	if [ "${MESH_HTMODE}" != "HT20" -a "${MESH_HTMODE}" != "HT40+" -a "${MESH_HTMODE}" != "HT40-" ]; then
		MESH_HTMODE=""
	fi
	iw dev mesh0 set channel ${MESH_CHANNEL} ${MESH_HTMODE}|| die "Failed to change to mesh channel"
	ip link set dev mesh0 up || die "Failed to bring up mesh interface"
	if [ "${MESH_PASSWORD}" = "" ]; then
		iw dev mesh0 mesh join ${MESH_ID} || die "Failed to join mesh"
	else
		# Set up secure mesh.  Note that first we must create various config
		# files required by authsae
		mkdir -p /var/run/authsae || die "Failed to create authsae config dir"
		[ "${MESH_HTMODE}" == "" ] && MESH_HTMODE="none"
		echo "$(cat <<EOF
authsae:
{
 sae:
  {
    debug=480;
    password="${MESH_PASSWORD}";
    group=[19, 26, 21, 25, 20];
    blacklist=5;
    thresh=5;
    lifetime=3600;
  };
 meshd:
  {
    meshid="${MESH_ID}";
    interface="mesh0";
    passive=0;
    debug=1;
    mediaopt=1;
    band="${MESH_BAND}";
    channel=${MESH_CHANNEL};
    htmode="${MESH_HTMODE}";
  };
};
EOF
)" > /var/run/authsae/authsae.conf
		meshd-nl80211 -c /var/run/authsae/authsae.conf &> /dev/null &
		[ $? -eq 0 ] || die "Failed to launch meshd"
		sleep 3
	fi

	log "Mesh deployed"
fi

# If the node is a MESH GATE, it will bridge mesh0 with eth0. If not, with wlan1
if [ "${MESH_GATE}" == "yes" ]; then
	BRGD_IF=eth0
	iw mesh0 set mesh_param mesh_hwmp_rootmode=1
	iw mesh0 set mesh_param mesh_gate_announcements=1
else
	BRGD_IF=wlan1
fi

# If our INFRA and CTL interfaces are the same, we have to choose which one to
# honor.  If we can't find the CTL network, do INFRA.  Otherwise to CTL.
if [[ "${INFRA_IF}" != "" ]] && [[ "${CTL_IF}" != "" ]] && [[ "${INFRA_IF}" == "${CTL_IF}" ]]; then
	log -n "Checking for control network ${CTL_SSID}..."
	ip link set dev ${CTL_IF} up || die "Failed to bring up control/infra interface"
	iw dev ${CTL_IF} scan | grep -e '[[:space:]]*SSID: '${CTL_SSID}'$' &> /dev/null
	if [ $? -eq 0 ]; then
		log "Found it.  Joining control network."
		INFRA_IF=""
	else
		log "Didn't find it.  Starting AP."
		CTL_IF=""
	fi
fi

if [ "${INFRA_IF}" != "" ]; then
	ip link set dev ${INFRA_IF} down || die "failed to bring down infra interface ${INFRA_IF}"

	if [ "${MESH_GATE}" != "yes" ]; then
		# prepare the config file
		HOSTAP_CONF=/etc/meshkit/hostapd.default.conf
		[ -e /etc/meshkit/hostapd.conf ] && HOSTAP_CONF=/etc/meshkit/hostapd.conf
		[ -e ${HOSTAP_CONF} ] || die "${HOSTAP_CONF} file does not exist"
		mkdir -p /var/run/hostapd/
		rm -f /var/run/hostapd/hostapd.conf
		while read l; do
			L=`eval echo ${l}`
			[ "${L}" != "" ] && echo ${L} >> /var/run/hostapd/hostapd.conf
		done < ${HOSTAP_CONF}
		hostapd -B /var/run/hostapd/hostapd.conf || die "Failed to launch hostapd"
	fi

	bridge_ifaces br0 mesh0 ${BRGD_IF}
	sleep 10
	if [ "${MESH_IP}" == "auto" ]; then
		log "Detecting peer mesh link"
		while true; do
			ISLINKED=`iw mesh0 station dump | grep -c ESTAB`
			if [ "${ISLINKED}" != "0" ]; then
				log "Launching dhcp client daemon"
				dhclient -d -v br0 &> /var/log/dhclient.log &
				break
			fi
			sleep 2
		done
	else
		ifconfig br0 ${REAL_MESH_IP} || die "Failed to set static IP on mesh interface"
	fi

	#Wait until we die
	while true; do
		sleep 5
	done
fi

if [ "${CTL_IF}" != "" ]; then

	IFACE=mesh0
	if [ "${MESH_GATE}" == "yes"  ]; then
		bridge_ifaces br0 mesh0 ${BRGD_IF}
		IFACE=br0
	fi

	if [ "${MESH_IP}" == "auto" ]; then
		log "Launching dhcp client daemon"
                dhclient -d -v ${IFACE} &> /var/log/dhclient.log &
	else
		ifconfig ${IFACE} ${REAL_MESH_IP} || die "Failed to set static IP on mesh interface"
	fi

	ifconfig -a | grep ${CTL_IF} &> /dev/null || die "No such iface ${CTL_IF}"

	# Try over and over to bring up the control interface.
	ip link set dev ${CTL_IF} down || die "Failed to bring down control iface"

	while true; do

		log -n "Bringing up control interface ${CTL_IF}..."
		try "ifconfig ${CTL_IF} up" || continue

		if [ "${CTL_SSID}" != "" ]; then
			while true; do
				log -n "Scanning for control network ${CTL_SSID}..."
				try "iw dev ${CTL_IF} scan | grep -e '[[:space:]]*SSID: '${CTL_SSID}'$'" || continue
				break;
			done

			log -n "Connecting to control network ${CTL_SSID}..."
			try iw ${CTL_IF} connect ${CTL_SSID} || continue
			COUNT=20
			while [ ${COUNT} -gt 0 ]; do
				STATUS=`iw wlan1 link | head -1 | awk '{print $1}'`
				if [ "${STATUS}" = "Connected" ]; then
					break;
				fi
				COUNT=$((${COUNT} - 1))
				sleep 1
			done
			if [ ! ${COUNT} -gt 0 ]; then
				log "Failed to connect to ${CTL_SSID}.  Trying again in 5s."
				sleep 5
				continue
			fi
		fi

		# Set the IP address for the ctl interface
		if [ "${REAL_CTL_IP}" = "auto" ]; then
			log "Getting an IP address from the DHCP server..."
			dhclient -d -v ${CTL_IF} &> /var/log/dhclient.log &
		else
			log -n "Assigning IP address..."
			try ifconfig ${CTL_IF} ${REAL_CTL_IP} || continue
		fi

		# If we actually make it all the way to the end, we\'re connected.  Now
		# we poll to ensure that we stay connected.
		while true; do
			STATUS=`iw wlan1 link | head -1 | awk '{print $1}'`
			if [ "${STATUS}" != "Connected" ]; then
				log "Lost control link.  Re connecting."
				break
			fi
			sleep 5
		done
	done
fi
