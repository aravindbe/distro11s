Introduction
============

The kernel where we develop open80211s lives here:

git@github.com:cozybit/open80211s.git

This tree is meant to track the wireless-testing tree closely, which is available here:

git://git.kernel.org/pub/scm/linux/kernel/git/linville/wireless-testing.git

We want to make releases from the open80211s tree that contains our development
patches.  Generally, these patches will have been submitted, but perhaps not
accepted.  Accordingly, the patches are subject to revision and will have to be
updated.  This document describes how we set up the open80211s tree to do this,
and how the development cycle works.

This practice can be applied to other trees as needed.  For example, if we
start to have a long list of wpa_supplicant patches that are under review but
not committed upstream yet, consider setting up a forked wpa_supplicant tree
and applying a similar technique to the one described here.

Setting up the tree
===================

Development bound for distro11s happens on the o11s-dev branch.  You, the
distro11s maintainer, are the only one who messes with this branch.  Start by
creating it:

   $ cd some/kernel/git/tree/ # possibly ${DISTRO11S_SRC}/kernel
   $ git remote add wt git://git.kernel.org/pub/scm/linux/kernel/git/linville/wireless-testing.git
   $ git fetch wt master:wt
   $ git remote add o11s git@github.com:cozybit/open80211s.git
   $ git push o11s +wt:o11s-dev
   $ git fetch o11s o11s-dev:o11s-dev

Now, you must redirect distro11s to build the o11s tree instead of the upstream
tree.  To do this, alter board/<board>/pkglist.  You probably have to rm -rf
${DISTRO11S_SRC}/kernel and run distro11s/scripts/fetch.sh to get the new
kernel in place.  distro11s is not clever enough to just fetch a branch.

The branches
============

github.com:cozybit/open80211s.git/master
	tracks latest release of o11s-dev

github.com:cozybit/open80211s.git/wt
	tracks wireless-testing/master HEAD

github.com:cozybit/open80211s.git/o11s-dev
	Patches in this branch have been submitted upstream. Candidate for next
	release.

github.com:cozybit/open80211s.git/bleeding-edge
	A conglomoration of all feature branches, used by cozybit developers to
	exchange work-in-progress patches, etc.

github.com:cozybit/open80211s.git/<feature-branch-here>:
	One of these per feature and/or patch set. Merged from wt on creation.

Getting Patches Upstream
========================

Submitting:
-----------

Release Maintainer:
-------------------
You'll need the following tools:
	- sparse, a semantic parser for C
	- a CC: script, comes in handy when you routinely CC the same people,
	  this will save you some typos. Here is the one I use for w-t submissions:
	  $ cat wt.cc
	  #!/bin/bash
	  echo "johannes@sipsolutions.net"
	  echo "linville@tuxdriver.com"

Also, see 'man git-send-email' on how to configure git to send emails.

0. Rebase your feature branch onto wt, and ensure the patches apply cleanly.
1. Create the patch files from your tree:
	$ git format-patch patchset_start_sha~1...patchset_end_sha -o patch_dir/
	- (maybe add a '--cover-letter' if you feel it is needed)

2. Perform the following checks:
	- 'make M=net/mac80211 C=2 CHECKFLAGS=-D__CHECK_ENDIAN__' gives no warnings
	- './scripts/checkpatch.pl patch_dir/*' ditto.
	- clean compile with and without CONFIG_MAC80211_MESH enabled
	- tests pass.
	- It's not after 5PM.

3. Submit:
	- do a dry run:
	$ git send-email --to=linux-wireless@vger.kernel.org --cc-cmd=./wt.cc --bcc=distro11s@cozybit.com patch_dir/* --dry-run
	- use '--annotate' to edit each each patch. If this is a resubmission,
	  annotate the patch subject to look like [PATCH vN]. Put any versioning
	  info after the first '---', so git won't include this in the upstream
	  commit log.
	- If everything looks OK, repeat the above command without '--dry-run'

Revising:
---------

The mailing list will invariably have comments on your patches, so don't be
discouraged because your v1 didn't get in! All you have to do is:

	1. Address the comments.
	2. Once you think you've assembled enough comments and fixes to assemble
	   a perfect vN+1, reply to the vN thread with a note saying vN+1 is
	   coming.
	3. 'push -f' your vN+1 into your feature branch, and see the Submitting
	   section.
	4. If patches are accepted, you're done, else goto 1.

Maintain versioning info in the commit log, so the patch submitter can keep
track of these.  Any versioning information goes after the 'Signed-off-by', with
the following format:

	vN:
		- don't do foo (attribution)
		- do bar (attribution)

tip:
	# to review your patchset and make sure no debugging cruft is left in:
	$ git diff wt

Any Day
=======

The release maintainer will notice a submission to the distro11s mailing list
and take this as a cue to rebuild bleeding-edge and o11s-dev from the latest
feature branches.

Release Day
===========

You, the distro11s maintainer, are preparing the next release of open80211s

Start by recreating bleeding-edge and o11s-dev:

	1. reset wt to wireless-testing/master
	2. branch bleeding-edge and o11s-dev from wt.
	3. pull the patch set from all feature branches onto bleeding-edge.
	4. pull the patch sets which have been submitted upstream onto o11s-dev.
	5. Build and run smoke tests on the new o11s-dev. If all looks good, create a
	   new branch o11s-X.Y.Z, reset master to this, and inform the open80211s
	   mailling list.
