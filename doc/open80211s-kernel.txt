Introduction
============

The kernel where we develop open80211s lives here:

git@github.com:cozybit/open80211s.git

This tree is meant to track the wireless-testing tree closely, which is available here:

git://git.kernel.org/pub/scm/linux/kernel/git/linville/wireless-testing.git

We want to make releases from the open80211s tree that contains our development
patches.  Generally, these patches will have been submitted, but perhaps not
accepted.  Accordingly, the patches are subject to revision and will have to be
updated.  This document describes how we set up the open80211s tree to do this,
and how the development cycle works.

This practice can be applied to other trees as needed.  For example, if we
start to have a long list of wpa_supplicant patches that are under review but
not committed upstream yet, consider setting up a forked wpa_supplicant tree
and applying a similar technique to the one described here.

Setting up the tree
===================

Development bound for distro11s happens on the distro11s-dev branch.  You, the
distro11s maintainer, are the only one who messes with this branch.  Start by
creating it:

   $ cd some/kernel/git/tree/ # possibly ${DISTRO11S_SRC}/kernel
   $ git remote add wt git://git.kernel.org/pub/scm/linux/kernel/git/linville/wireless-testing.git
   $ git fetch wt master:wt
   $ git remote add o11s git@github.com:cozybit/open80211s.git
   $ git push o11s +wt:distro11s-dev
   $ git fetch o11s distro11s-dev:distro11s-dev

Now, you must redirect distro11s to build the o11s tree instead of the upstream
tree.  To do this, alter board/<board>/pkglist.  You probably have to rm -rf
${DISTRO11S_SRC}/kernel and run distro11s/scripts/fetch.sh to get the new
kernel in place.  distro11s is not clever enough to just fetch a branch.

Okay.  Now your working copy has a distro11s-dev branch.  You (the distro11s
maintainer) will periodically rebase this branch to wt HEAD and push -f to
o11s.  Read on for more details on how this works.

Fetching Patches
================

You need a way to fetch raw patches submitted by developers.  Developers will
keep their work in branch bleeding-edge of github.com:cozybit/open80211s.git
From time to time developers will ask the maintainer to pull from bleeding-edge
onto distro11s-devel.  

The branches
===========

github.com:cozybit/open80211s.git/distro11s-devel
  - A patchset currently being tested that will be sent upstream once basic
    smoke tests pass.  Patches in this branch should be "upstreamable" (correct
    sign-off, format, checkpatch tested, etc.).

github.com:cozybit/open80211s.git/master
  - A pristine clone of wireless-testing whose head points to the w-t commit on
    which the development branch is based.

github.com:cozybit/open80211s.git/bleeding-edge
  - Used by cozybit developers to exchange work-in-progress patches, etc.

Any Day
=======

You, the distro11s maintainer, are asked to pull from bleeding-edge.  Maybe the
patch list since last rebase, maybe a few cherry-picked commits.

Submitting Patches Upstream
===========================

You'll need the following tools:
	- sparse, a semantic parser for C
	- a CC: script, comes in handy when you routinely CC the same people,
	  this will save you some typos. Here is the one I use for w-t submissions:
	  $ cat wt.cc
	  #!/bin/bash
	  echo "johannes@sipsolutions.net"
	  echo "linville@tuxdriver.com"

Also, see 'man git-send-email' on how to configure git to send emails.

0. Rebase your patches onto w-t HEAD and ensure the patches apply cleanly.
1. Create the patch files from your tree:
	$ git format-patch patchset_start_sha~1...patchset_end_sha -o patch_dir/
	- (maybe add a '--cover-letter' if you feel it is needed)

2. Perform the following checks:
	- 'make C=2 M=net/mac80211' gives no warnings.
	- './scripts/checkpatch.pl patch_dir/*' ditto.
	- clean compile with and without CONFIG_MAC80211_MESH enabled
	- tests pass.
	- 'Signed-off by's are present.
	- It's not after 5PM.

3. Submit:
	- if this patchset is a resubmission, use '--in-reply-to=<reply-id>'.
	- do a dry run:
	$ git send-email --to=linux-wireless@vger.kernel.org --cc-cmd=./wt.cc --bcc=distro11s@cozybit.com patch_dir/* --dry-run
	- use '--annotate' to edit each each patch. Comments and versioning info
	  go after the first '---', as git won't include this in the commit log.
	- If everything looks OK, repeat the above command without '--dry-run'

Release Day
===========

You, the distro11s maintainer, are preparing the next release of distro11s.

1. Start by rebasing the open80211s tree's distro11s-dev branch to wireless
   testing HEAD:

   $ cd $DITRO11S_SRC/kernel/
   $ git fetch wt master:wt
   $ git rebase wt distro11s-dev
   [ resolve any conflicts ]

2. Build and run smoke tests on the release candidate.  If all looks good, you
   submit the patches to the wireless-testing mailing list.

3. Once/if the release candidate is good, you tag it as release X.Y.Z and
   inform the open80211s mailing list.

4. Also inform developers that the release is good and ask them to rebase the
   bleeding-edge branch to distro11s-dev
